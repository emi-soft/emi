<?php
/**
 * Created by Maksim Skliarov.
 * Project: emi-cms
 * Company: Emi-Soft <emi.softdeveloper@gmail.com>
 * Date: 04/09/2018
 */

namespace emi\config;


class DBConfigManager extends ConfigManager
{


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->setConfigs($this->getConfigs());
    }


    /**
     * @see ConfigManagerInterface::getConfig()
     *
     * @param $key
     *
     * @return mixed
     */
    public function getConfig($key)
    {
        $config = Config::find()->where(['key' => $key])->one();
        $config ? $config : null;
        return $config;
    }

    /**
     * @see ConfigManagerInterface::getConfigs()
     * @return \emi\config\Config[] the module manager application component.
     */
    public function getConfigs($group = 'app')
    {
        $configs = Config::find()->where(['group' => $group])->all();
        $configs ? $configs : null;
        return $configs;
    }


    /**
     * @param array $name
     * @param array $config
     */
    public function setConfig($name, $config)
    {
        if (!is_array($config)) {
            if (property_exists(\Emi::$app, $name)) {

                \Emi::$app->$name = $config;
            }
        }
    }

    /**
     * @inheritDoc Установка параметров Приложения полученых из DB
     *
     * @param string $component_name
     * @param array  $configs
     */
    public function setConfigs($configs)
    {
        foreach ($configs as $config) {
            $this->setConfig($config->key, $config->value);
        }
    }

    /**
     * @inheritDoc Установка параметров Приложения по умолчанию полученых из DB
     *
     * @param string $component_name
     * @param array  $configs
     */
    public function setConfigsDefault(){
        foreach ($this->getConfigs() as $config) {
           $config->value = $config->default_value;
           $config->save();
           $this->setConfig($config->key, $config->value);
        }
    }

    /**
     * @see ConfigManagerInterface::getConfig()
     *
     * @param $key
     *
     * @return mixed
     */
    public function updateConfig($key, $value)
    {
        $config = Config::find()->where(['key' => $key])->one();
        if ($config) {
            $config->value = $value;
            return $config->validate() && $config->save() ? true : $config->getErrors();
        }
        return false;
    }


}